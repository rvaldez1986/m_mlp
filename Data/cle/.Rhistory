setwd("C:/Users/roberto.valdez/Desktop")
sigmoid = function(x){
s = 1/(1+exp(-x))
return(s)
}
mean = 5.4
a = rep(mean, 100)
pred = sigmoid(a)
library(ROCR)
install.packages("ROCR",dep=TRUE)
library(ROCR)
sample(n=10,x=c(1,0),replace=TRUE)
sample(10,x=c(1,0),replace=TRUE)
sigmoid = function(x){
s = 1/(1+exp(-x))
return(s)
}
mean = 5.4
a = rep(mean, 100)
pred = sigmoid(a)
library(ROCR)
pred1 <- prediction(pred, sample(100,x=c(1,0),replace=TRUE))
perf1 <- performance(pred1,"tpr","fpr")
plot(perf1)
install.packages("sampleSelection", dep=TRUE)
library(sampleSelection)
data(RandHIE)
View(RandHIE)
RandHIE$cost <- RandHIE$outpdol +
RandHIE$drugdol +
RandHIE$suppdol +
RandHIE$mentdol +
RandHIE$inpdol
library(dplyr)
rh <- RandHIE %>% group_by(zper) %>% summarise(cost = first(cost),
age=first(xage),
disea=first(disea),
physlm=first(physlm),
logc=first(logc), #lc
idp=first(idp),#
lpi=first(lpi),#
fmde=first(fmde),
linc=first(linc),
lfam=first(lfam),
female=first(female),
black=first(black),
educdec=first(educdec),
hlthg=first(hlthg)
)
View(rh)
rh <- rh %>% filter(age >= 18 & !is.na(educdec))
rh$zper <- NULL
# remove implausible values
rh <- rh %>% filter(physlm == 0 | physlm == 1 | black == 0 | black == 1)
length(which(rh$cost ==0))/nrow(rh) # 18.1 % zeros
library(VGAM)
tob <- vglm(cost ~ ., tobit(Lower = 0, type.fitted = "censored"), data = rh, maxit=100)
summary(tob)
AICc(tob)
library(cplm)
tw2 <- cpglm(cost ~ ., data=rh)
summary(tw2)
(AIC(tw2) - 2*length(coef(tw2)) ) / -2
install.packages('cplm', dep=TRUE)
library(cplm)
tw2 <- cpglm(cost ~ ., data=rh)
summary(tw2)
(AIC(tw2) - 2*length(coef(tw2)) ) / -2
AIC(tw2)
rh$zero <- ifelse(rh$cost == 0, 0, 1)  # 0 if zero costs
h1 <- glm(zero ~ . -cost, family=binomial(link=logit), data=rh)
summary(h1)
logLik(h1)
h2 <- glm(cost ~ . -zero, family = Gamma(link = log), data=subset(rh, zero == 1))
summary(h2)
logLik(h2)
AIC(h1) + AIC(h2)
set.seed(41)
idx <- sample(1:nrow(rh), 500, replace=F)
train.x <- rh[-idx, ]
test.x <-  rh[idx,]
### tobit
tob.rmse <- vglm(cost ~ . -zero, tobit(Lower = 0, type.fitted = c("censored")), data = train.x, maxit=100)
summary(tob.rmse)
preds <- predict(tob.rmse, test.x, type="response")
#rmse
sqrt(mean((preds - test.x$cost)^2))
library(sampleSelection) # for RandHIE data
library(dplyr)
data(RandHIE)
# combined costs
RandHIE$cost <- RandHIE$outpdol +
RandHIE$drugdol +
RandHIE$suppdol +
RandHIE$mentdol +
RandHIE$inpdol
# select relevant variables
rh <- RandHIE %>% group_by(zper) %>% summarise(cost = first(cost),
age=first(xage),
disea=first(disea),
physlm=first(physlm),
logc=first(logc), #lc
idp=first(idp),#
lpi=first(lpi),#
fmde=first(fmde),
linc=first(linc),
lfam=first(lfam),
female=first(female),
black=first(black),
educdec=first(educdec),
hlthg=first(hlthg)
)
# select only people >= 18 and remove missing values
rh <- rh %>% filter(age >= 18 & !is.na(educdec))
rh$zper <- NULL
# remove implausible values
rh <- rh %>% filter(physlm == 0 | physlm == 1 | black == 0 | black == 1)
length(which(rh$cost ==0))/nrow(rh) # 18.1 % zeros
############## tobit
library(VGAM)
tob <- vglm(cost ~ ., tobit(Lower = 0, type.fitted = "censored"), data = rh, maxit=100)
summary(tob)
AICc(tob)
############## tweedie
library(cplm)
tw2 <- cpglm(cost ~ ., data=rh)
summary(tw2)
(AIC(tw2) - 2*length(coef(tw2)) ) / -2
setwd('C:\\Users\\rober\\Desktop\\RAND_pro\\prog_calc\\prog_calc2\\Data\\cle')
data = read.csv("Rand_train.csv", header=TRUE, sep=',')
data_val = read.csv("Rand_valid.csv", header=TRUE, sep=',')
data_test = read.csv("Rand_test.csv", header=TRUE, sep=',')
#Transform cost
data$zero <- ifelse(data$cost == 0, 0, 1)  # 0 if zero costs
data_test$zero <- ifelse(data_test$cost == 0, 0, 1)  # 0 if zero costs
data_val$zero <- ifelse(data_val$cost == 0, 0, 1)  # 0 if zero costs
h1.rmse <- glm(zero ~ . -cost, family=binomial(link=logit), data=data)
pred2 <- predict(h1.rmse, data_val, type="response")
pred3 <- predict(h1.rmse, data_test, type="response")
h2.rmse <- glm(cost ~ . -zero, family = Gamma(link = log), data=subset(data, zero == 1))
dataTrans = subset(data_val, zero == 1)
predsTrans = predict(h2.rmse, dataTrans, type="response")
preds3 <- pred3 * predict(h2.rmse, data_test, type="response")
mean(abs(preds3 - data_test$cost))
setwd('C:\\Users\\rober\\Desktop\\RAND_pro\\prog_calc\\prog_calc2\\Data\\cle')
data = read.csv("Rand_train.csv", header=TRUE, sep=',')
data_val = read.csv("Rand_valid.csv", header=TRUE, sep=',')
data_test = read.csv("Rand_test.csv", header=TRUE, sep=',')
#Transform cost
data$zero <- ifelse(data$cost == 0, 0, 1)  # 0 if zero costs
data_test$zero <- ifelse(data_test$cost == 0, 0, 1)  # 0 if zero costs
data_val$zero <- ifelse(data_val$cost == 0, 0, 1)  # 0 if zero costs
## gamma twopart
h1.rmse <- glm(zero ~ . -cost, family=binomial(link=logit), data=data)
pred2 <- predict(h1.rmse, data_val, type="response")
pred3 <- predict(h1.rmse, data_test, type="response")
h2.rmse <- glm(cost ~ . -zero, family = Gamma(link = log), data=subset(data, zero == 1))
dataTrans = subset(data_val, zero == 1)
predsTrans = predict(h2.rmse, dataTrans, type="response")
preds3 <- pred3 * predict(h2.rmse, data_test, type="response")
mean(abs(preds3 - data_test$cost))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds3[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds3[data_test$cost>0]
mean(abs(yh1 - y1))
mean(abs(yh2 - y2))
library(cplm)
tw.rmse <- cpglm(cost ~., data=data)
preds5 <- predict(tw.rmse, data_test, type="response")
mean(abs(preds5 - data_test$cost))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds5[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds5[data_test$cost>0]
mean(abs(yh1 - y1))
mean(abs(yh2 - y2))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds5[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds5[data_test$cost>0]
mean(abs(yh1 - y1))
mean(abs(yh2 - y2))
library(VGAM)
tob.rmse <- vglm(cost ~ . -zero, tobit(Lower = 0, type.fitted = c("censored")), data = data, maxit=100)
preds <- predict(tob.rmse, data_test, type="response")
mean(abs(preds - data_test$cost))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds[data_test$cost>0]
mean(abs(yh1 - y1))
mean(abs(yh2 - y2))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds[data_test$cost>0]
mean(abs(yh1 - y1))
preds0 = exp(data_test$lpcost) - 0.5
mean(abs(preds0 - data_test$cost))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds[data_test$cost>0]
mean(abs(yh1 - y1))
mean(abs(yh2 - y2))
y1 = data_test$cost[data_test$cost==0]
yh1 = preds0[data_test$cost==0]
y2 = data_test$cost[data_test$cost>0]
yh2 = preds0[data_test$cost>0]
mean(abs(yh1 - y1))
mean(abs(yh2 - y2))
